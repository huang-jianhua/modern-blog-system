version: '3.8'

services:
  # PostgreSQL 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: blog_postgres
    environment:
      POSTGRES_DB: blog_db
      POSTGRES_USER: blog_user
      POSTGRES_PASSWORD: blog_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - blog_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_user -d blog_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: blog_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: blog_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - blog_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端 API 服务
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: blog_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://blog_user:blog_password@postgres:5432/blog_db
      REDIS_URL: redis://:redis_password@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
    volumes:
      - ./packages/backend/src:/app/src
      - /app/node_modules
    networks:
      - blog_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # 前端应用
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    container_name: blog_frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
      VITE_APP_TITLE: 现代化博客系统
    ports:
      - "3000:3000"
    volumes:
      - ./packages/frontend/src:/app/src
      - ./packages/frontend/public:/app/public
      - /app/node_modules
    networks:
      - blog_network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: blog_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - blog_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: blog_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - blog_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: blog_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - blog_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Adminer 数据库管理
  adminer:
    image: adminer:latest
    container_name: blog_adminer
    ports:
      - "8080:8080"
    networks:
      - blog_network
    depends_on:
      - postgres
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络
networks:
  blog_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 